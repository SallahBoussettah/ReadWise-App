// Mocks generated by Mockito 5.4.6 from annotations
// in reading_companion_app/test/blocs/book_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:reading_companion_app/models/book.dart' as _i4;
import 'package:reading_companion_app/models/book_status.dart' as _i5;
import 'package:reading_companion_app/repositories/book_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i2.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Book>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i3.Future<List<_i4.Book>>.value(<_i4.Book>[]),
          )
          as _i3.Future<List<_i4.Book>>);

  @override
  _i3.Future<List<_i4.Book>> getBooksByStatus(_i5.BookStatus? status) =>
      (super.noSuchMethod(
            Invocation.method(#getBooksByStatus, [status]),
            returnValue: _i3.Future<List<_i4.Book>>.value(<_i4.Book>[]),
          )
          as _i3.Future<List<_i4.Book>>);

  @override
  _i3.Future<_i4.Book?> getById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i3.Future<_i4.Book?>.value(),
          )
          as _i3.Future<_i4.Book?>);

  @override
  _i3.Future<void> addBook(_i4.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#addBook, [book]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateBook(_i4.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#updateBook, [book]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteBook(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBook, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Book>> watchAll() =>
      (super.noSuchMethod(
            Invocation.method(#watchAll, []),
            returnValue: _i3.Stream<List<_i4.Book>>.empty(),
          )
          as _i3.Stream<List<_i4.Book>>);

  @override
  _i3.Stream<List<_i4.Book>> watchBooksByStatus(_i5.BookStatus? status) =>
      (super.noSuchMethod(
            Invocation.method(#watchBooksByStatus, [status]),
            returnValue: _i3.Stream<List<_i4.Book>>.empty(),
          )
          as _i3.Stream<List<_i4.Book>>);

  @override
  _i3.Stream<_i4.Book?> watchById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#watchById, [id]),
            returnValue: _i3.Stream<_i4.Book?>.empty(),
          )
          as _i3.Stream<_i4.Book?>);

  @override
  _i3.Future<List<_i4.Book>> getAllBooks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllBooks, []),
            returnValue: _i3.Future<List<_i4.Book>>.value(<_i4.Book>[]),
          )
          as _i3.Future<List<_i4.Book>>);

  @override
  _i3.Future<void> insert(_i4.Book? entity) =>
      (super.noSuchMethod(
            Invocation.method(#insert, [entity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> update(_i4.Book? entity) =>
      (super.noSuchMethod(
            Invocation.method(#update, [entity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> exists(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
